from datetime import datetime, timedelta
import math
from sendMessage import sendMessage
from buttons import *
from config import *
from states import *
import html
from database import insert_data, get_names, get_all_vips, add_vip, check_user_exists, delete_vip_by_id, get_vip_data_by_id, get_stats, increment_field_by_id
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram import executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage


dp = Dispatcher(bot, storage=MemoryStorage())
yoomoney_client = Client(YOOMONEY_TOKEN)


async def date_in_a_30_days():
    current_datetime = datetime.now()
    date_in_one_week = current_datetime + timedelta(days=30)
    timestamp_in_one_week = int(date_in_one_week.timestamp())
    print(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.utcfromtimestamp(timestamp_in_one_week)}")
    return timestamp_in_one_week


class VIP:
    users = list()


    async def update_vip_users():
        VIP.users = await get_all_vips()

    async def add_vip_user(id):
        VIP.users = await add_vip(id, await date_in_a_30_days())

    async def del_vip_user(id):
        VIP.users = await delete_vip_by_id(id)


async def if_less(text):
    if text is None:
        return True
    return True if len(text) < LIMIT_SYMBOLS else False

async def check_end(user_id):
    sec_now = datetime.now()
    sec_now = int(sec_now.timestamp())
    sec_end = await get_vip_data_by_id(user_id)
    if sec_end:
        if sec_now > sec_end:
            return True
        return False
    else:
        text = f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        await bot.send_message(ADMIN_ID, text)
        print(f"\n{text}\n")

async def check_payment(label):
    history = yoomoney_client.operation_history()
    print(f"\nLabel: {label}")
    for operation in history.operations:
        if operation.label == label and operation.status == "success":
            print(f"–ü–õ–ê–¢–Å–ñ {operation.amount} –£–°–ü–ï–®–ù–û –ü–†–û–®–Å–õ")
            return True
            break
    else:
        print("–ü–õ–ê–¢–Å–ñ –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù")
        return False

async def get_username(tmp_username):
    if "none" == str(tmp_username).lower():
        username = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    else:
        username = f"@{tmp_username}"
    return username

async def on_startup(_):
    print("–ë–æ—Ç –æ–Ω–ª–∞–π–Ω")
    await VIP.update_vip_users()

@dp.message_handler(commands="start", state='*')
async def commands_start(message, state=FSMContext):
    user_id = message.from_user.id
    name_user = message.from_user.first_name
    username = await get_username(message.from_user.username)
    await insert_data(user_id, name_user, username)
    if len(message.text.split()) > 1: # —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        unique_code = message.text.split()[1]
        if unique_code.isdigit():
            unique_code = int(unique_code)
            if unique_code == user_id:
                await message.answer("‚öô <i>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–∏ —Å–µ–±–µ!</i>", reply_markup=removeButton, parse_mode="HTML")
                await state.finish()
            else:
                if await check_user_exists(unique_code):
                    await increment_field_by_id(unique_code, "TRANSITIONS")
                    message = await message.answer("üí¨–°–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <b>–∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> —Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, \
                                        –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É.\n\n‚úçüèª –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ:\n- üåÖ<b>—Ñ–æ—Ç–æ</b>\n- üìπ<b>–≤–∏–¥–µ–æ</b>\n- üí¨<b>—Ç–µ–∫—Å—Ç</b>\n- üîä<b>–≥–æ–ª–æ—Å–æ–≤—ã–µ</b>\n- üì∑<b>–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è</b>\n- üìë<b>—Å—Ç–∏–∫–µ—Ä—ã</b>", reply_markup=cancelMenu, parse_mode="HTML")
                    await User.write.set()
                    async with state.proxy() as data:
                        data['other_id'] = unique_code
                        data['message_id'] = message.message_id
                else:
                    await message.answer("<i>–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</i>\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /support", parse_mode='HTML')
                    print(f"id {unique_code} –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
        else:
            await message.answer("<i>–û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.\n–ü–∞—Ä–∞–º–µ—Ç—Ä start –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä</i>\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /support", parse_mode="HTML")
            print(f"–ù–µ–≤–µ—Ä–Ω—ã–π id {unique_code}")
    else:
        await message.answer(f"üîó <b>–í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n{LINK}?start={message.from_user.id}\n\n–û–ø—É–±–ª–∏–∫—É–π –µ—ë –≤ <b>Telegram</b>, <b>TikTok</b>, <b>VK</b>, <b>Instagram</b> –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n<i>/mystats - —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n/support - –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>", 
                             reply_markup=removeButton, 
                             disable_web_page_preview=True,
                             parse_mode="HTML")

@dp.message_handler(commands="support", state='*')
async def commands_support(message, state=FSMContext):
    await message.answer("‚öô <i>–ï—Å–ª–∏ —É –í–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—é–¥–∞ -</i> @AnQSupport", parse_mode="HTML")
    await state.finish()

@dp.message_handler(commands="link", state='*')
async def commands_support(message, state=FSMContext):
    await message.answer(f"üîó <b>–í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n{LINK}?start={message.from_user.id}\n\n–û–ø—É–±–ª–∏–∫—É–π –µ—ë –≤ <b>Telegram</b>, <b>TikTok</b>, <b>VK</b>, <b>Instagram</b> –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", 
                             reply_markup=removeButton, 
                             disable_web_page_preview=True,
                             parse_mode="HTML")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "cancel", state=(User.write, User.answer, None))
async def user_write_cancel(call, state):
    await call.answer("–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
    await call.message.edit_text(f"‚öô <b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è!</b>\n\nüîó –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{LINK}?start={call.from_user.id}\n\n–û–ø—É–±–ª–∏–∫—É–π –µ—ë –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", parse_mode="HTML", disable_web_page_preview=True)
    await state.finish()

@dp.message_handler(content_types=types.ContentType.ANY, state=User.write)
async def user_write(message: types.Message, state=FSMContext):
    user_id = message.from_user.id
    recip_id = await sendMessage(user_id, message, state)
    if recip_id:
        await increment_field_by_id(user_id, "SENT")
        await increment_field_by_id(recip_id, "RECEIVED")
    await state.finish()

            
@dp.callback_query_handler(lambda c: "NEW" in c.data, state="*")
async def again_send_message(call: types.callback_query, state=FSMContext):
    await call.answer("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await call.message.edit_reply_markup()
    message = await call.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>", reply_markup=cancelMenu, parse_mode="HTML")
    async with state.proxy() as data:
        data['message_id'] = message.message_id
        data['other_id'] = str(call.data)[3:]
    await User.write.set()

@dp.callback_query_handler(lambda c: "HU" in c.data, state="*")
async def WhoIsIt(call, state=FSMContext):
    user_id = call.from_user.id
    if user_id in VIP.users:
        name, username = await get_names(int(call.data[2:]))
        name = html.escape(name)
        username = html.escape(username)
        if await check_end(user_id):
            await call.answer("–ö–æ–Ω—á–∏–ª–∞—Å—å")
            await bot.send_message(user_id, f"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.</b>\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –∏–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π, —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ <b>VIP</b>üëë\n\n<b>–¶–µ–Ω–∞:</b> <s>{FIRST_PRICE} —Ä—É–±–ª–µ–π</s> <b>{PRICE} —Ä—É–±–ª–µ–π</b> (-{100-int(math.ceil(PRICE*100/FIRST_PRICE))}%)\n<b>–°—Ä–æ–∫: 30 –î–ù–ï–ô</b>", 
                               parse_mode="HTML", 
                               reply_markup = await GetPaymentsMenu(user_id))
            await VIP.del_vip_user(user_id)
        else:
            await call.answer("–ß–µ–ª–æ–≤–µ–∫")
            await bot.send_message(user_id, f"<b>–î–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ:</b>\n\n<b>–ò–º—è -</b> {name}\n<b>–Æ–∑–µ—Ä–Ω–µ–π–º -</b> {username}", parse_mode="HTML", reply_to_message_id=call.message.message_id, protect_content=True)
    else:
        await call.answer("–ü–æ–∫—É–ø–∫–∞ VIP")
        await bot.send_message(user_id, f"<b>–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Ç–∞–∫–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç?</b>\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –∏–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π, —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ <b>VIP</b>üëë\n\n<b>–¶–µ–Ω–∞:</b> <s>{FIRST_PRICE} —Ä—É–±–ª–µ–π</s> <b>{PRICE} —Ä—É–±–ª–µ–π</b> <i>(-{100-int(math.ceil(PRICE*100/FIRST_PRICE))}%)</i>\n<b>–°—Ä–æ–∫: 30 –î–ù–ï–ô</b>", 
                               parse_mode="HTML", 
                               reply_markup = await GetPaymentsMenu(user_id))

@dp.callback_query_handler(lambda c: "check" == c.data, state="*")
async def CheckPayment(call, state=FSMContext):
    user_id = call.from_user.id
    if user_id not in VIP.users:
        label = "M"+str(user_id)
        if await check_payment(label):
            await VIP.add_vip_user(user_id)
            await call.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            await bot.edit_message_text("<b>–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ VIP-—Å—Ç–∞—Ç—É—Åüëë</b>\n\n<b>–¢–µ–ø–µ—Ä—å –í—ã –≤–∏–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–ø–∏—Å–∞–ª!</b>\n\n<i><b>–°–†–û–ö –î–ï–ô–°–¢–í–ò–Ø: 7 –î–ù–ï–ô</b></i>", 
                                        chat_id=user_id, 
                                        message_id=call.message.message_id, 
                                        parse_mode="HTML")
            print(f"{user_id} –¥–æ–±–∞–≤–ª–µ–Ω VIP\n")
        else:
            await call.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
    else:
        await call.answer("–í—ã —É–∂–µ VIP")

@dp.message_handler(Text("–û—Ç–º–µ–Ω–∞ ‚ùå"), state=User.answer)
async def user_write_cancel(message: types.Message, state):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞!", reply_markup=removeButton)
    await state.finish()

@dp.callback_query_handler(lambda c: "AN" in c.data, state="*")
async def answer(call, state):
    user_id = call.from_user.id
    await call.answer("–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    message = await bot.send_message(user_id, "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>", reply_markup=cancelMenu, parse_mode="HTML")
    await User.answer.set()
    async with state.proxy() as data:
        data['other_id'] = call.data[2:]
        data["message_id"] = message.message_id

@dp.message_handler(content_types=ALL_CONTENT_TYPE, state=User.answer)
async def user_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    async with state.proxy() as data:
        recip_id = await sendMessage(user_id, message, state, answer=True)
        if recip_id:
            await increment_field_by_id(user_id, "SENT")
            await increment_field_by_id(recip_id, "RECEIVED")
        await state.finish()

@dp.message_handler(commands="mystats", state="*")
async def user_write(message: types.Message, state=FSMContext):
    user_id = message.from_user.id
    recevied, sent, transitions = await get_stats(user_id)
    await message.answer(f"üåü<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n\nüí¨ <i><b>–ü–æ–ª—É—á–µ–Ω–æ:</b></i> {recevied}\n\n‚Ü©Ô∏è <i><b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b></i> {sent}\n\nüëÅ‚Äçüó® <i><b>–ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ:</b></i> {transitions}\n\n\n<i>{SMALL_LINK}</i>", parse_mode="HTML")


# –∞–¥–º–∏–Ω–∫–∞ #
@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID, commands="add_vip", state="*")
async def add_new_vip_users_admin(message: types.Message, state: FSMContext):
    text = message.text
    if len(text.split(" ")) == 2:
        _, user_id = text.split(" ")
        if user_id.isdigit():
            try:
                await VIP.add_vip_user(int(user_id))
                await message.answer("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
            except:
                await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        else:
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤")

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID, commands="del_vip", state="*")
async def del_vip_vip_users_admin(message: types.Message, state: FSMContext):
    text = message.text
    if len(text.split(" ")) == 2:
        _, user_id = text.split(" ")
        if user_id.isdigit():
            try:
                await VIP.del_vip_user(int(user_id))
                await message.answer("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω")
            except:
                await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        else:
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤")

@dp.callback_query_handler(state="*")
async def not_available(call, state=FSMContext):
    await call.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    await call.message.delete() 

@dp.message_handler(state="*")
async def not_state(message, state=FSMContext):
    await message.answer(f"üîó <b>–í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n{LINK}?start={message.from_user.id}\n\n–û–ø—É–±–ª–∏–∫—É–π –µ—ë –≤ <b>Telegram</b>, <b>TikTok</b>, <b>VK</b>, <b>Instagram</b> –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n<i>/mystats - —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n/support - –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</i>", 
                             reply_markup=removeButton, 
                             disable_web_page_preview=True,
                             parse_mode="HTML")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)